name: CI

on:
  push:
    branches:
      - main
    # Publish `v1.2.3` tags as releases.
    # tags:
    #   - v*

  pull_request:
    branches:
      - main

  schedule:
    - cron: '0 0 * * *'

env:
  IMAGE_NAME: torrserver
  TOKEN_TG: ${{ secrets.TOKEN_TG }}
  CHAT_ID_TG: ${{ secrets.CHAT_ID_TG }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run check version YouROK/TorrServer
      run: |
        old_version=$(cat README.md | grep Version | sed -n '/.*Version /s///p')
        new_version=$(curl -s "https://github.com/YouROK/TorrServer/releases/latest" | sed 's#.*tag/\(.*\)\".*#\1#')
        echo "old_version=$old_version" >> $GITHUB_ENV
        echo "new_version=$new_version" >> $GITHUB_ENV
        [[ "$old_version" == "$new_version" ]] && echo $old_version && exit || sed -i "s/Version .*/Version $new_version/" README.md
        [[ "$new_version" == "Not Found" ]] && curl -so /dev/null -X POST https://api.telegram.org/bot$TOKEN_TG/sendMessage -d text="Error check torrserver" -d chat_id=$CHAT_ID_TG
    - name: Build image
      if: ${{ env.old_version != env.new_version && env.new_version != 'Not Found' }}
      run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

    - name: Log in to registry
      if: ${{ env.old_version != env.new_version && env.new_version != 'Not Found' }}
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Push image
      if: ${{ env.old_version != env.new_version && env.new_version != 'Not Found' }}
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        # Use Docker `latest` tag convention
        [ "$VERSION" == "main" ] && VERSION=latest
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION

    - name: Commit files
      if: ${{ env.old_version != env.new_version && env.new_version != 'Not Found' }}
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -am "$(date +%d.%m.%Y) Update $new_version"
        git push
